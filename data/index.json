{
    "decks": [
        {
            "name": "JavaScript",
            "label": "JS",
            "thumbnailColour": "#F7DF1E",
            "stacks": [
                {
                    "name": "Scope",
                    "stack": [

                    ]
                }
            ]
        },
        {
            "name": "Design Patterns",
            "label": "Design Patterns",
            "thumbnailColour": "#414141",
            "whiteText": true,
            "stacks": [
                {
                    "name": "Creational Design Patters",
                    "stack": [
                        {
                            "question": "Abstract Factory",
                            "answer": "Sets of methods to make various objects."
                        },
                        {
                            "question": "Builder",
                            "answer": "Make and return one object various ways."
                        },
                        {
                            "question": "Factory Method",
                            "answer": "Methods to make and return components of one object various ways."
                        },
                        {
                            "question": "Prototype",
                            "answer": "Make new objects by cloning the objects which you set as prototypes."
                        },
                        {
                            "question": "Singleton",
                            "answer": "A class distributes the only instance of itself."
                        }
                    ]
                },
                {
                    "name": "Structural Design Patters",
                    "stack": [
                        {
                            "question": "Adapter",
                            "answer": "A class extends another class, takes in an object, and makes the taken object behave like the extended class."
                        },
                        {
                            "question": "Bridge",
                            "answer": "An abstraction and implementation are in different class hierarchies."
                        },
                        {
                            "question": "Composite",
                            "answer": "Assemble groups of objects with the same signature."
                        },
                        {
                            "question": "Decorator",
                            "answer": "One class takes in another class, both of which extend the same abstract class, and adds functionality."
                        },
                        {
                            "question": "Facade",
                            "answer": "One class has a method that performs a complex process calling several other classes."
                        },
                        {
                            "question": "Flyweight",
                            "answer": "The reusable and variable parts of a class are broken into two classes to save resources."
                        },
                        {
                            "question": "Proxy",
                            "answer": "One class controls the creation of and access to objects in another class."
                        }
                    ]
                },
                {
                    "name": "Creational Design Patters",
                    "stack": [
                        {
                            "question": "Chain of Responsibility",
                            "answer": "A method called in one class can move up a hierarchy to find an object that can properly execute the method."
                        },
                        {
                            "question": "Command",
                            "answer": "An object encapsulates everything needed to execute a method in another object."
                        },
                        {
                            "question": "Interpreter",
                            "answer": "Define a macro language and syntax, parsing input into objects which perform the correct opertaions."
                        },
                        {
                            "question": "Iterator",
                            "answer": "One object can traverse the elements of another object."
                        },
                        {
                            "question": "Mediator",
                            "answer": "An object distributes communication between two or more objects."
                        },
                        {
                            "question": "Memento",
                            "answer": "One object stores another objects state."
                        },
                        {
                            "question": "Observer",
                            "answer": "An object notifies other object(s) if it changes."
                        },
                        {
                            "question": "State",
                            "answer": "An object appears to change its` class when the class it passes calls through to switches itself for a related class."
                        },
                        {
                            "question": "Strategy",
                            "answer": "An object controls which of a family of methods is called. Each method is in its` own class that extends a common base class."
                        },
                        {
                            "question": "Template",
                            "answer": "An abstract class defines various methods, and has one non-overridden method which calls the various methods."
                        },
                        {
                            "question": "Visitor",
                            "answer": "One or more related classes have the same method, which calls a method specific for themselves in another class."
                        }
                    ]
                }
            ]
        }
    ]
}